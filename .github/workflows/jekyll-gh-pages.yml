# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["Elparadisogonzalo"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

# Multi-line YAML content
yaml_content = """
version: 2
updates:

  # JavaScript / Node.js
  - package-ecosystem: "npm"
    directory: "/" # root folder
    schedule:
      interval: "weekly"
      day: "monday"
      time: "08:00"
      timezone: "UTC"
    open-pull-requests-limit: 10
    rebase-strategy: "auto"
    labels:
      - "dependencies"
      - "javascript"
    ignore:
      - dependency-name: "lodash"
        versions: [">=5.0.0"]

  # Python (pip)
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      interval: "daily"
    open-pull-requests-limit: 5
    rebase-strategy: "auto"
    labels:
      - "dependencies"
      - "python"
    insecure-external-code: false

  # Docker
  - package-ecosystem: "docker"
    directory: "/"
    schedule:
      interval: "weekly"
    labels:
      - "dependencies"
      - "docker"

  # GitHub Actions
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
    labels:
      - "ci"
      - "dependencies"

  # Terraform
  - package-ecosystem: "terraform"
    directory: "/infrastructure/"
    schedule:
      interval: "monthly"
    labels:
      - "infrastructure"
      - "dependencies"

  # Git Submodules
  - package-ecosystem: "submodules"
    directory: "/"
    schedule:
      interval: "monthly"
    labels:
      - "submodules"

  # .NET / NuGet
  - package-ecosystem: "nuget"
    directory: "/"
    schedule:
      interval: "weekly"
    labels:
      - "dependencies"
      - "dotnet"

  # PHP / Composer
  - package-ecosystem: "composer"
    directory: "/"
    schedule:
      interval: "weekly"
    labels:
      - "dependencies"
      - "php"

  # Java / Kotlin (Gradle)
  - package-ecosystem: "gradle"
    directory: "/"
    schedule:
      interval: "weekly"
    labels:
      - "dependencies"
      - "java"

  # Rust / Cargo
  - package-ecosystem: "cargo"
    directory: "/"
    schedule:
      interval: "weekly"
    labels:
      - "dependencies"
      - "rust"
"""

# Add the YAML content line by line
for line in yaml_content.strip().split('\n'):
    pdf.cell(200, 5, txt=line, ln=True)

# Save the PDF
pdf_output_path = "/mnt/data/dependabot_config.pdf"
pdf.output(pdf_output_path)
pdf_output_path
